{"version":3,"sources":["Components/Header/header.js","service/bookService.js","Components/ListAllBooksComponent/listAllBooks.js","Components/GetBookComponent/getBook.js","Components/AddBookComponent/addbook.js","Components/FormComponent/form.js","Components/UpdateBookComponent/updateBook.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","alignItems","textAlign","axios","get","BASE_URL_FOR_BOOKS","bookId","book","post","put","delete","ListAllBooks","props","state","books","addBook","bind","editBook","deleteBook","id","BookService","then","res","setState","filter","this","history","push","getAllBooks","data","onClick","map","key","name","category","marginLeft","viewBook","Component","GetBook","match","params","getBookById","AddBook","saveOrUpdateBook","e","preventDefault","console","log","JSON","stringify","updateBook","changeIdHandler","event","target","value","changeNameHandler","changeCategoryHandler","getTitle","placeholder","onChange","saveOrUpdateEmployee","cancel","UpdateBook","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7d8c3448.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header=()=>{\n  const headerOne=\"Hello\";\n  const headerTwo=\"Deebits software solution\";\n    return(\n        <div className=\"Header\">\n                  <h1 style={{alignItems:\"center\",textAlign:\"center\"}}>{headerOne} </h1>\n                  <h3 style={{textAlign:\"center\"}}>{headerTwo}</h3>\n\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport axios from 'axios';\n\nconst BASE_URL_FOR_BOOKS=\"http://localhost:8081/api\";\n\nclass BookService {\n    //get all books\n    getAllBooks(){\n        return axios.get(BASE_URL_FOR_BOOKS+'/'+`books`);\n    }\n    //get book by id\n    getBookById(bookId){\n        return axios.get(BASE_URL_FOR_BOOKS+'/'+bookId);\n    }\n    // add a book to the list\n    addBook(book){\n        return axios.post(BASE_URL_FOR_BOOKS+'/'+book);\n\n    }\n    //update a book \n    updateBook(book,bookId){\n        return axios.put(BASE_URL_FOR_BOOKS+'/'+bookId,book);\n    }\n    //delete a book by id\n    deleteBook(bookId){\n        return axios.delete(BASE_URL_FOR_BOOKS+'/'+bookId);\n    }\n}\nexport default new BookService();\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport BookService from '../../service/bookService';\n\nclass ListAllBooks extends Component{\n    constructor(props){\n        super(props)\n        this.state ={\n            books:[]\n        }\n        this.addBook = this.addBook.bind(this);\n        this.editBook = this.editBook.bind(this);\n        this.deleteBook = this.deleteBook.bind(this);\n    }\n    deleteBook(id){\n        BookService.deleteBook(id).then( res => {\n            this.setState({books: this.state.books.filter(books => books.id !== id)});\n        });\n    }\n    viewBook(id){\n        this.props.history.push(`/view-book/${id}`);\n    }\n    editBook(id){\n        this.props.history.push(`/add-book/${id}`);\n    }\n\n\n    componentDidMount(){\n        BookService.getAllBooks().then((res) => {\n            this.setState({ books: res.data});\n        });\n    }\n    addBook(){\n        this.props.history.push('/add-book/_add');\n    }\n\n    render(){\n        return(\n            <div>\n                <h2 className=\"text-center\">Books List</h2>\n                <div className = \"row\">\n                <button className=\"btn btn-primary\" onClick={this.addBook}> Add Book</button>\n                </div>\n                <br></br>\n                <div className = \"row\">\n                    <table className = \"table table-striped table-bordered\">\n\n                        <thead>\n                            <tr>\n                                <th> Book Id</th>\n                                <th> Book Name</th>\n                                <th> Book Category</th>\n                                <th> Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.books.map(\n                                    book => \n                                    <tr key = {book.id}>\n                                            <td> {book.id} </td>   \n                                            <td> {book.name}</td>\n                                            <td> {book.category}</td>\n                                            <td>\n                                                <button onClick={ () => this.editBook(book.id)} className=\"btn btn-info\">Update </button>\n                                                <button style={{marginLeft: \"10px\"}} onClick={ () => this.deleteBook(book.id)} className=\"btn btn-danger\">Delete </button>\n                                                <button style={{marginLeft: \"10px\"}} onClick={ () => this.viewBook(book.id)} className=\"btn btn-info\">View </button>\n                                            </td>\n                                    </tr>\n                                )\n                            }\n                        </tbody>\n                    </table>\n\n                </div>\n\n       </div>\n        );\n    }\n}\nexport default ListAllBooks;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport BookService from '../../service/bookService';\n\nclass GetBook extends Component{\n    constructor(props){\n        super(props)\n        this.state ={\n            id:this.props.match.params.id,\n            book:{}\n        }\n    }\n\n    componentDidMount(){\n        BookService.getBookById(this.state.id).then(res=>{\n            this.setState({book:res.data});\n        })\n    }\n\n    render(){\n        return(\n            <div>\n            <br></br>\n                <div className = \"card col-md-6 offset-md-3\">\n                    <h3 className = \"text-center\"> View Book Details</h3>\n                    <div className = \"card-body\">\n                        <div className = \"row\">\n                            <label> Book Id: </label>\n                            <div> { this.state.book.id }</div>\n                        </div>\n                        <div className = \"row\">\n                            <label> Book Name: </label>\n                            <div> { this.state.book.name }</div>\n                        </div>\n                        <div className = \"row\">\n                            <label> Book Category: </label>\n                            <div> { this.state.book.category}</div>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        );        \n    }\n};\nexport default GetBook;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport FormHandler from '../FormComponent/form';\nimport BookService from '../../service/bookService';\n\nclass AddBook extends Component{\n    constructor(props){\n        super(props)\n            this.state={\n                id:this.props.match.params.id,\n                name:'',\n                category:''\n            }\n            this.changeNameHandler = this.changeNameHandler.bind(this);\n            this.changeCategoryHandler = this.changeCategoryHandler.bind(this);\n            this.saveOrUpdateBook = this.saveOrUpdateBook.bind(this);\n        }\n    \n    componentDidMount(){\n        if(this.state.id==='_add'){\n            return\n        }else{\n            BookService.getBookById(this.state.id)\n            .then((res)=>{\n                let book= res.data;\n                this.setState({\n                    id:book.id,\n                    name:book.name,\n                    category:book.category\n                });\n            })\n        }\n    }\n\n    saveOrUpdateBook =(e)=>{\n        e.preventDefault();\n        let book ={\n            id:this.state.id,\n            name:this.state.name,\n            category:this.state.category\n        };\n        console.log(`book =>` +JSON.stringify(book));\n        if(this.state.id==='_add'){\n            BookService.addBook(book).then(res=>{\n                this.props.history.push('/books');\n            });\n        }else{\n            BookService.updateBook(book,this.state.id).then(res=>{\n                this.props.history.push('/books');\n            })\n        }\n    }\n    changeIdHandler= (event) => {\n        this.setState({id: event.target.value});\n    }\n\n    changeNameHandler= (event) => {\n        this.setState({name: event.target.value});\n    }\n\n    changeCategoryHandler= (event) => {\n        this.setState({category: event.target.value});\n    }\n\n    cancel(){\n        this.props.history.push('/books');\n    }\n\n    getTitle(){\n        if(this.state.id==='_add'){\n            return <h3 className=\"text-center\">Add Book</h3>\n        }else{\n            return <h3 className=\"text-center\">Update Book</h3>\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <br></br>\n                   <div className = \"container\">\n                        <div className = \"row\">\n                            <div className = \"card col-md-6 offset-md-3 offset-md-3\">\n                                {\n                                    this.getTitle()\n                                }\n                                <div className = \"card-body\">\n                                    <form>\n                                        <div className = \"form-group\">\n                                            <label> Id: </label>\n                                            <input placeholder=\"Id\" name=\"id\" className=\"form-control\" \n                                                value={this.state.id} onChange={this.changeIdHandler}/>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label> Name: </label>\n                                            <input placeholder=\"Name\" name=\"name\" className=\"form-control\" \n                                                value={this.state.name} onChange={this.changeNameHandler}/>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label> Category </label>\n                                            <input placeholder=\"Book Category\" name=\"category\" className=\"form-control\" \n                                                value={this.state.category} onChange={this.changeCategoryHandler}/>\n                                        </div>\n\n                                        <button className=\"btn btn-success\" onClick={this.saveOrUpdateEmployee}>Save</button>\n                                        <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n\n                   </div>\n            </div>\n        );\n    }\n\n   \n}\n\nexport default AddBook;","import React, { Component } from 'react';\nimport { Button,Form } from 'semantic-ui-react';\n\nclass FormHandler extends Component{\n\n    handleSubmit = event =>{\n        this.setState(\n            {\n                id:event.target.value,\n                name:event.target.value,\n                category:event.target.value\n            }\n        );\n    return(\n        <div className=\"ui container\" >\n            <Form className=\"form\" onSubmit={this.handleSubmit}>\n\n                <Form.Field>\n                    <label>Book id</label>\n                    <input type=\"text\" name=\"id\" placeholder=\"ID of the book\"></input>\n                </Form.Field>\n  \n                <Form.Field>\n                    <label>Book name</label>\n                    <input type=\"text\" name=\"name\" placeholder=\"name of the book\"></input>\n                </Form.Field>\n\n                <Form.Field>\n                    <label>Book category</label>\n                    <input type=\"text\" name=\"category\" placeholder=\"category of the book\"></input>\n                </Form.Field>\n\n                <Form.Field>\n                    <Button type=\"submit\" >Add book</Button>\n                </Form.Field>\n                    \n            </Form>\n        </div>\n    );\n    }\n};\nexport default FormHandler;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport BookService from '../../service/bookService';\n\nclass UpdateBook extends Component{\n    constructor(props){\n        super(props)\n\n        this.state={\n            id: this.props.match.params.id,\n            name:'',\n            category:''\n        }\n        this.changeNameHandler = this.changeNameHandler.bind(this);\n        this.changeCategoryHandler = this.changeCategoryHandler.bind(this);\n        this.updateBook = this.updateBook.bind(this);\n    }\n    componentDidMount(){\n        BookService.getBookById(this.state.id).then( (res) =>{\n            let book = res.data;\n            this.setState({\n                name: book.name,\n                category: book.category,\n                id:book.id\n            });\n        });\n\n    }\n    updateBook = (e) => {\n        e.preventDefault();\n        let book = {id: this.state.id, name: this.state.name, category: this.state.category};\n        console.log('book => ' + JSON.stringify(book));\n        console.log('id => ' + JSON.stringify(this.state.id));\n        BookService.updateBook(book, this.state.id).then( res => {\n            this.props.history.push('/books');\n        });\n    }\n    changeIdHandler= (event) => {\n        this.setState({id: event.target.value});\n    }\n\n    changeNameHandler= (event) => {\n        this.setState({name: event.target.value});\n    }\n\n    changeCategoryHandler= (event) => {\n        this.setState({category: event.target.value});\n    }\n\n    cancel(){\n        this.props.history.push('/books');\n    }\n    render() {\n        return (\n            <div>\n                <br></br>\n                   <div className = \"container\">\n                        <div className = \"row\">\n                            <div className = \"card col-md-6 offset-md-3 offset-md-3\">\n                                <h3 className=\"text-center\">Update Book</h3>\n                                <div className = \"card-body\">\n                                    <form>\n                                        <div className = \"form-group\">\n                                            <label> Book Id: </label>\n                                            <input placeholder=\"Book Id\" name=\"id\" className=\"form-control\" \n                                                value={this.state.id} onChange={this.changeIdHandler}/>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label>Book Name: </label>\n                                            <input placeholder=\"Book Name\" name=\"name\" className=\"form-control\" \n                                                value={this.state.name} onChange={this.changeNameHandler}/>\n                                        </div>\n                                        <div className = \"form-group\">\n                                            <label> Category: </label>\n                                            <input placeholder=\"Book Category\" name=\"category\" className=\"form-control\" \n                                                value={this.state.category} onChange={this.changeCategoryHandler}/>\n                                        </div>\n\n                                        <button className=\"btn btn-success\" onClick={this.updateBook}>Save</button>\n                                        <button className=\"btn btn-danger\" onClick={this.cancel.bind(this)} style={{marginLeft: \"10px\"}}>Cancel</button>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n\n                   </div>\n            </div>\n        )\n    }\n}\nexport default UpdateBook;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\n// import logo from './logo.svg';\nimport './App.css';\n// import { Button, Checkbox, Form } from 'semantic-ui-react'\nimport Header from './Components/Header/header';\nimport ListAllBooks from './Components/ListAllBooksComponent/listAllBooks';\nimport GetBook from './Components/GetBookComponent/getBook';\nimport AddBook from './Components/AddBookComponent/addbook';\nimport UpdateBook from './Components/UpdateBookComponent/updateBook';\n// import {Divider} from 'semantic-ui-react';\nfunction App(){\n  \nreturn(\n  <div>\n      \n      <Router>\n        <Header></Header>  \n        <div className=\"container\">\n        <Switch> \n          <Route path = \"/\" exact component = {ListAllBooks}></Route>\n          <Route path = \"/books\" component = {ListAllBooks}></Route>\n          <Route path = \"/add-book/:id\" component = {AddBook}></Route>\n          <Route path = \"/view-book/:id\" component = {GetBook}></Route>\n          <Route path = \"/update-book/:id\" component = {UpdateBook}></Route>\n        </Switch>\n        </div>\n      </Router>\n  </div>\n);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}